/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2013, Joyent, Inc. All rights reserved.
 *
 */

var ipaddr = require('/usr/vm/node_modules/ip');
var net = require('net');
var sprintf = require('/usr/node/node_modules/sprintf').sprintf;

function ltrim(str, chars)
{
    chars = chars || '\\s';
    str = str || '';
    return str.replace(new RegExp('^[' + chars + ']+', 'g'), '');
}

function rtrim(str, chars)
{
    chars = chars || '\\s';
    str = str || '';
    return str.replace(new RegExp('[' + chars + ']+$', 'g'), '');
}

function trim(str, chars)
{
    return ltrim(rtrim(str, chars), chars);
}

function isUUID(str) {
    var re = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
    if (str && str.length === 36 && str.match(re)) {
        return true;
    } else {
        return false;
    }
}

function isPrivateIP(str)
{
    if (!net.isIPv4(str)) {
        return false;
    }

    function inRange(start, end, prospect) {
        if (ipaddr.aton(start) <= ipaddr.aton(prospect)
            && ipaddr.aton(prospect) <= ipaddr.aton(end)) {

            return true;
        }
        return false;
    }

    if (inRange('10.0.0.0', '10.255.255.255', str)) {
        return true;
    } else if (inRange('172.16.0.0', '172.31.255.255', str)) {
        return true;
    } else if (inRange('192.168.0.0', '192.168.255.255', str)) {
        return true;
    }

    return false;
}

function fixBoolean(str)
{
    if (str === 'true') {
        return true;
    } else if (str === 'false') {
        return false;
    } else {
        return str;
    }
}

function fixBooleanLoose(str)
{
    if (str === 'true' || str === '1' || str === 1) {
        return true;
    } else if (str === 'false' || str === '0' || str === 0) {
        return false;
    } else {
        return str;
    }
}

function isCIDR(str) {
    if (typeof (str) !== 'string') {
        return false;
    }
    var parts = str.split('/');
    if (parts.length !== 2 || !net.isIPv4(parts[0])) {
        return false;
    }

    var size = Number(parts[1]);
    if (!size || size < 8 || size > 32) {
        return false;
    }

    return true;
}

function separateCommas(str)
{
    return str.split(',');
}

function unmangleMem(str)
{
    return (Number(str) / (1024 * 1024));
}

function unbase64(str)
{
    return new Buffer(str, 'base64').toString('ascii');
}

function numberify(str)
{
    return Number(str);
}

function generateMAC()
{
    var data = [(Math.floor(Math.random() * 15) + 1).toString(16) + 2];
    for (var i = 0; i < 5; i++) {
        var oct = (Math.floor(Math.random() * 255) + 1).toString(16);
        if (oct.length == 1) {
            oct = '0' + oct;
        }
        data.push(oct);
    }

    return data.join(':');
}

// return the MAC address based on a VRRP Virtual Router ID
function vrrpMAC(vrid) {
    return sprintf('00:00:5e:00:01:%02x', vrid);
}

// add the string to buffer at pos, returning pos of new end of the buffer.
function addString(buf, str, pos)
{
    var len = str.length;
    buf.write(str, pos);
    return (len + 1);
}

module.exports = {
    fixBoolean: fixBoolean,
    numberify: numberify,
    separateCommas: separateCommas,
    unbase64: unbase64,
    unmangleMem: unmangleMem
};
