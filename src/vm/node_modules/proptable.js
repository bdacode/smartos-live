/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2013, Joyent, Inc. All rights reserved.
 *
 */

/*
 *
 * vmadm_name (vmadm's name w/ _)
 * orig_name (zonecfg's name for example w/ -)
 * comes_from: zonecfg.zone, zonecfg.attr, zonecfg.rctl, zonecfg.nic, zfs,
 *     zoneadm, metadata.json, tags.json
 * updatable
 * allowed_values: [list]
 * type: boolean, string, integer, ...
 * transform: fixBoolean, unmangleMem, numberify, â€¦
 *
 */

exports.properties = {
    alias: {
        zonexml: 'zone.attr.alias',
        loadValueTranslator: 'utils.unbase64'
    }, archive_on_delete: {
        zonexml: 'zone.attr.archive-on-delete',
        loadValueTranslator: 'utils.fixBoolean'
    }, autoboot: {
        zonexml: 'zone.autoboot',
        loadValueTranslator: 'utils.fixBoolean'
    }, billing_id: {
        zonexml: 'zone.attr.billing-id'
    }, boot: {
        zonexml: 'zone.attr.boot'
    }, brand: {
        zonexml: 'zone.brand'
    }, cpu_cap: {
        zonexml: 'zone.rctl.zone.cpu-cap.privileged.deny',
        loadValueTranslator: 'utils.numberify'
    }, cpu_type: {
        zonexml: 'zone.attr.cpu_type'
    }, cpu_shares: {
        zonexml: 'zone.rctl.zone.cpu-shares.privileged.none',
        loadValueTranslator: 'utils.numberify'
    }, create_timestamp: {
        zonexml: 'zone.attr.create-timestamp'
    }, debug_id: {
        zonexml: 'zone.debugid',
        ignore: true
    }, default_gateway: {
        deprecated: true,
        zonexml: 'zone.attr.default-gateway'
    }, 'disks.boot': {
        zonexml: 'zone.device.net-attr.boot',
        loadValueTranslator: 'utils.fixBoolean'
    }, 'disks.image_size': {
        zonexml: 'zone.device.net-attr.image-size',
        loadValueTranslator: 'utils.numberify'
    }, 'disks.image_uuid': {
        zonexml: 'zone.device.net-attr.image-uuid'
    }, 'disks.media': {
        zonexml: 'zone.device.net-attr.media'
    }, 'disks.model': {
        zonexml: 'zone.device.net-attr.model'
    }, 'disks.path': {
        zonexml: 'zone.device.match'
    }, 'disks.size': {
        zonexml: 'zone.device.net-attr.size',
        loadValueTranslator: 'utils.numberify'
    }, disk_driver: {
        zonexml: 'zone.attr.disk-driver'
    }, dns_domain: {
        zonexml: 'zone.attr.dns-domain'
    }, do_not_inventory: {
        zonexml: 'zone.attr.do-not-inventory',
        loadValueTranslator: 'utils.fixBoolean'
    }, failed: {
        zonexml: 'zone.attr.failed'
    }, 'filesystems.source': {
        zonexml: 'zone.filesystem.special'
    }, 'filesystems.target': {
        zonexml: 'zone.filesystem.directory'
    }, 'filesystems.type': {
        zonexml: 'zone.filesystem.type'
    }, 'filesystems.raw': {
        zonexml: 'zone.filesystem.raw'
    }, firewall_enabled: {
        zonexml: 'zone.attr.firewall-enabled',
        loadValueTranslator: 'utils.fixBoolean'
    }, fs_allowed: {
        zonexml: 'zone.fs-allowed'
    }, global_allowed_address: {
        zonexml: 'zone.network.allowed-address',
        ignore: true
    }, hostname: {
        zonexml: 'zone.attr.hostname'
    }, ip_type: {
        zonexml: 'zone.ip-type',
        ignore: true
    }, image_uuid: {
        zonexml: 'zone.attr.dataset-uuid'
    }, init_name: {
        zonexml: 'zone.attr.init-name'
    }, limit_priv: {
        zonexml: 'zone.limitpriv'
    }, max_locked_memory: {
        zonexml: 'zone.rctl.zone.max-locked-memory.privileged.deny',
        loadValueTranslator: 'utils.unmangleMem'
    }, max_lwps: {
        zonexml: 'zone.rctl.zone.max-lwps.privileged.deny',
        loadValueTranslator: 'utils.numberify'
    }, max_physical_memory: {
        zonexml: 'zone.rctl.zone.max-physical-memory.privileged.deny',
        loadValueTranslator: 'utils.unmangleMem'
    }, max_swap: {
        zonexml: 'zone.rctl.zone.max-swap.privileged.deny',
        loadValueTranslator: 'utils.unmangleMem'
    }, nic_driver: {
        zonexml: 'zone.attr.nic-driver'
    }, nics: {
        zonexml: 'zone.network',
        type: 'array'
    }, 'nics.dhcp_server': {
        zonexml: 'zone.network.net-attr.dhcp_server',
        loadValueTranslator: 'utils.fixBoolean'
    }, 'nics.gateway': {
        zonexml: 'zone.network.net-attr.gateway'
    }, 'nics.interface': {
        zonexml: 'zone.network.physical'
    }, 'nics.ip': {
        zonexml: 'zone.network.net-attr.ip'
    }, 'nics.mac': {
        zonexml: 'zone.network.mac-addr'
    }, 'nics.model': {
        zonexml: 'zone.network.net-attr.model'
    }, 'nics.netmask': {
        zonexml: 'zone.network.net-attr.netmask'
    }, 'nics.nic_tag': {
        zonexml: 'zone.network.global-nic'
    }, 'nics.primary': {
        zonexml: 'zone.network.net-attr.primary',
        loadValueTranslator: 'utils.fixBoolean'
    }, 'nics.vlan_id': {
        zonexml: 'zone.network.vlan-id',
        loadValueTranslator: 'utils.numberify'
    }, owner_uuid: {
        zonexml: 'zone.attr.owner-uuid'
    }, package_name: {
        deprecated: true,
        zonexml: 'zone.attr.package-name'
    }, package_version: {
        deprecated: true,
        zonexml: 'zone.attr.package-version'
    }, qemu_extra_opts: {
        zonexml: 'zone.attr.qemu-extra-opts',
        loadValueTranslator: 'utils.unbase64'
    }, qemu_opts: {
        zonexml: 'zone.attr.qemu-opts',
        loadValueTranslator: 'utils.unbase64'
    }, ram: {
        zonexml: 'zone.attr.ram',
        loadValueTranslator: 'utils.numberify'
    }, resolvers: {
        zonexml: 'zone.attr.resolvers',
        loadValueTranslator: 'utils.separateCommas'
    }, restart_init: {
        zonexml: 'zone.attr.restart-init',
        loadValueTranslator: 'utils.fixBoolean'
    }, spice_opts: {
        zonexml: 'zone.attr.spice-opts',
        loadValueTranslator: 'utils.unbase64'
    }, spice_password: {
        zonexml: 'zone.attr.spice-password',
        loadValueTranslator: 'utils.unbase64'
    }, spice_port: {
        zonexml: 'zone.attr.spice-port',
        loadValueTranslator: 'utils.numberify'
    }, transition: {
        zonexml: 'zone.attr.transition'
    }, tmpfs: {
        zonexml: 'zone.attr.tmpfs',
        loadValueTranslator: 'utils.numberify'
    }, v: {
        zonexml: 'zone.attr.vm-version',
        loadValueTranslator: 'utils.numberify'
    }, vcpus: {
        zonexml: 'zone.attr.vcpus',
        loadValueTranslator: 'utils.numberify'
    }, virtio_txburst: {
        zonexml: 'zone.attr.virtio-txburst',
        loadValueTranslator: 'utils.numberify'
    }, virtio_txtimer: {
        zonexml: 'zone.attr.virtio-txtimer',
        loadValueTranslator: 'utils.numberify'
    }, vga: {
        zonexml: 'zone.attr.vga'
    }, vm_autoboot: {
        zonexml: 'zone.attr.vm-autoboot',
        loadValueTranslator: 'utils.fixBoolean'
    }, vnc_password: {
        zonexml: 'zone.attr.vnc-password',
        loadValueTranslator: 'utils.unbase64'
    }, vnc_port: {
        zonexml: 'zone.attr.vnc-port',
        loadValueTranslator: 'utils.numberify'
    }, zfs_io_priority: {
        zonexml: 'zone.rctl.zone.zfs-io-priority.privileged.none',
        loadValueTranslator: 'utils.numberify'
    }, zonename: {
        zonexml: 'zone.name',
        create: ['all'],
        receive: ['all']
    }, zonepath: {
        zonexml: 'zone.zonepath',
        type: 'string'
    }
};
